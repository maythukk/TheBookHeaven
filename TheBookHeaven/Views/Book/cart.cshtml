@model List<TheBookHeaven.Models.CartItem>

@{
    ViewData["Title"] = "My Cart";
}

<div class="container mt-4">
    <h3 class="mb-4">My Cart</h3>

    @if (!Model.Any())
    {
        <p>Your cart is empty.</p>
    }
    else
    {
        <div class="table-responsive">
            <table class="table align-middle text-center">
                <thead class="table-light">
                    <tr>
                        <th>Image</th>
                        <th>Title</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Total</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                <img src="@item.Book.ImageUrl" alt="@item.Book.Title" style="width: 70px; height: 100px; object-fit: cover;" class="rounded shadow-sm" />
                            </td>
                            <td>@item.Book.Title</td>
                            <td data-price="@item.Book.Price">$@item.Book.Price</td>
                            <td>
                                <!-- + and - icons -->
                                <i class="bi bi-dash-circle-fill text-danger" style="cursor: pointer; font-size: 1.2em;" onclick="adjustQuantity(@item.BookId, 'decrease')"></i>
                                <span id="quantity-@item.BookId" class="mx-2 fw-bold">@item.Quantity</span>
                                <i class="bi bi-plus-circle-fill text-success" style="cursor: pointer; font-size: 1.2em;" onclick="adjustQuantity(@item.BookId, 'increase')"></i>
                            </td>
                            <td>$<span id="total-@item.BookId">@((item.Book.Price * item.Quantity).ToString("F2"))</span></td>
                            <td>
                                <form asp-action="RemoveFromCart" asp-controller="Book" method="post">
                                    <input type="hidden" name="id" value="@item.Book.Id" />
                                    <button type="submit" class="btn btn-sm btn-outline-danger">Remove</button>
                                </form>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="text-center mt-4">
            <h5>Grand Total: $<span id="grand-total">@(Model.Sum(item => item.Book.Price * item.Quantity).ToString("F2"))</span></h5>
            <a href="@Url.Action("Checkout", "Book")" class="btn btn-primary">Checkout</a>
        </div>
    }
</div>

<script>
    function adjustQuantity(bookId, action) {
        var url = action === 'increase' ? '/Book/IncreaseQuantity' : '/Book/DecreaseQuantity';

        console.log('Adjusting quantity for book ID:', bookId, 'Action:', action); // Debug log

        fetch(url + `?id=${bookId}`, {
            method: 'POST',
        })
        .then(response => {
            console.log('Response status:', response.status); // Debug log
            return response.json();
        })
        .then(data => {
            console.log('Response data:', data); // Debug log

            if (data.success) {
                // Get elements
                var quantityElement = document.getElementById('quantity-' + bookId);
                var totalElement = document.getElementById('total-' + bookId);
                var priceElement = quantityElement.closest('tr').querySelector('[data-price]');

                // Get current values
                var currentQuantity = parseInt(quantityElement.textContent);
                var price = parseFloat(priceElement.getAttribute('data-price'));

                console.log('Current quantity:', currentQuantity, 'Price:', price); // Debug log

                // Update quantity
                var newQuantity = currentQuantity;
                if (action === 'increase') {
                    newQuantity = currentQuantity + 1;
                } else if (action === 'decrease' && currentQuantity > 1) {
                    newQuantity = currentQuantity - 1;
                }

                // Update display
                quantityElement.textContent = newQuantity;
                totalElement.textContent = (price * newQuantity).toFixed(2);

                // Update cart count in header
                var cartCount = document.getElementById('cart-item-count');
                if (cartCount && data.cartCount) {
                    cartCount.textContent = data.cartCount;
                    cartCount.style.display = data.cartCount > 0 ? 'inline' : 'none';
                }

                // Update mobile cart count
                var mobileCartCount = document.getElementById('mobile-cart-count');
                if (mobileCartCount && data.cartCount) {
                    mobileCartCount.textContent = data.cartCount;
                    mobileCartCount.style.display = data.cartCount > 0 ? 'inline' : 'none';
                }

                // Update grand total
                updateGrandTotal();

            } else {
                console.error('Server returned success: false'); // Debug log
                alert("Failed to update quantity. Please try again.");
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert("Something went wrong. Please check the console for details.");
        });
    }

    function updateGrandTotal() {
        var total = 0;
        var totalElements = document.querySelectorAll('[id^="total-"]');

        totalElements.forEach(function(element) {
            total += parseFloat(element.textContent);
        });

        var grandTotalElement = document.getElementById('grand-total');
        if (grandTotalElement) {
            grandTotalElement.textContent = total.toFixed(2);
        }
    }
</script>