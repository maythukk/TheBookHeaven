@model TheBookHeaven.Models.User

@{
    ViewData["Title"] = "Register";
}

<div class="container mt-5" style="max-width: 500px;">
    <h3 class="text-center mb-4">Create a Customer Account</h3>

    <form asp-controller="Account" asp-action="Register" method="post" novalidate>
        <!-- Show model-level validation summary -->
        @Html.ValidationSummary(false, "", new { @class = "text-danger text-center" })

        <!-- Username -->
        <div class="mb-3">
            <label asp-for="Username" class="form-label"></label>
            <input asp-for="Username" class="form-control" />
            <span asp-validation-for="Username" class="text-danger"></span>
        </div>

        <!-- Email -->
        <div class="mb-3">
            <label asp-for="Email" class="form-label"></label>
            <input asp-for="Email" class="form-control" type="email" />
            <span asp-validation-for="Email" class="text-danger"></span>
        </div>

        <!-- Password -->
        <div class="mb-3">
            <label asp-for="Password" class="form-label"></label>
            <input asp-for="Password" class="form-control" type="password" id="password" oninput="checkPasswordValidity()" />
            <span asp-validation-for="Password" class="text-danger"></span>

            <div id="passwordError" class="text-danger d-none">
                Password must be at least 6 characters and include a number or symbol.
            </div>
        </div>

        <!-- server-side feedback -->
        <div class="text-danger text-center">@ViewBag.Error</div>
        <div class="text-success text-center">@ViewBag.Success</div>

        <!-- Submit button -->
        <div class="d-grid gap-2">
            <button type="submit" class="btn btn-primary">Register</button>
            <a asp-action="Login" class="btn btn-outline-secondary">Back to Login</a>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        const passwordInput = document.getElementById('password');
        const passwordError = document.getElementById('passwordError');

        // Validate password strength
        function validatePasswordStrength(password) {
            const minLength = 6;
            const hasNumberOrSymbol = /[0-9\W]/.test(password); // \W = symbol
            return password.length >= minLength && hasNumberOrSymbol;
        }

        // Add Bootstrap styling and show/hide error messages
        function checkPasswordValidity() {
            if (!validatePasswordStrength(passwordInput.value)) {
                passwordInput.classList.add('is-invalid');
                passwordError.classList.remove('d-none');
            } else {
                passwordInput.classList.remove('is-invalid');
                passwordError.classList.add('d-none');
            }
        }

        // Prevent form submission if password is invalid
        document.querySelector('form').addEventListener('submit', function (e) {
            if (!validatePasswordStrength(passwordInput.value)) {
                passwordInput.classList.add('is-invalid');
                passwordError.classList.remove('d-none');
                e.preventDefault(); // Stop submission
            }
        });
    </script>
}